/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Payment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 152547215431515928L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"example.avro\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"iban\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"toIban\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"float\"},{\"name\":\"balance\",\"type\":\"float\"},{\"name\":\"processed\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payment> ENCODER =
      new BinaryMessageEncoder<Payment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payment> DECODER =
      new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Payment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Payment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Payment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Payment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Payment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Payment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Payment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String name;
   private java.lang.String iban;
   private java.lang.String toIban;
   private float amount;
   private float balance;
   private boolean processed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payment() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param iban The new value for iban
   * @param toIban The new value for toIban
   * @param amount The new value for amount
   * @param balance The new value for balance
   * @param processed The new value for processed
   */
  public Payment(java.lang.String name, java.lang.String iban, java.lang.String toIban, java.lang.Float amount, java.lang.Float balance, java.lang.Boolean processed) {
    this.name = name;
    this.iban = iban;
    this.toIban = toIban;
    this.amount = amount;
    this.balance = balance;
    this.processed = processed;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return iban;
    case 2: return toIban;
    case 3: return amount;
    case 4: return balance;
    case 5: return processed;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = value$ != null ? value$.toString() : null; break;
    case 1: iban = value$ != null ? value$.toString() : null; break;
    case 2: toIban = value$ != null ? value$.toString() : null; break;
    case 3: amount = (java.lang.Float)value$; break;
    case 4: balance = (java.lang.Float)value$; break;
    case 5: processed = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'iban' field.
   * @return The value of the 'iban' field.
   */
  public java.lang.String getIban() {
    return iban;
  }


  /**
   * Sets the value of the 'iban' field.
   * @param value the value to set.
   */
  public void setIban(java.lang.String value) {
    this.iban = value;
  }

  /**
   * Gets the value of the 'toIban' field.
   * @return The value of the 'toIban' field.
   */
  public java.lang.String getToIban() {
    return toIban;
  }


  /**
   * Sets the value of the 'toIban' field.
   * @param value the value to set.
   */
  public void setToIban(java.lang.String value) {
    this.toIban = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public float getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(float value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'balance' field.
   * @return The value of the 'balance' field.
   */
  public float getBalance() {
    return balance;
  }


  /**
   * Sets the value of the 'balance' field.
   * @param value the value to set.
   */
  public void setBalance(float value) {
    this.balance = value;
  }

  /**
   * Gets the value of the 'processed' field.
   * @return The value of the 'processed' field.
   */
  public boolean getProcessed() {
    return processed;
  }


  /**
   * Sets the value of the 'processed' field.
   * @param value the value to set.
   */
  public void setProcessed(boolean value) {
    this.processed = value;
  }

  /**
   * Creates a new Payment RecordBuilder.
   * @return A new Payment RecordBuilder
   */
  public static example.avro.Payment.Builder newBuilder() {
    return new example.avro.Payment.Builder();
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payment RecordBuilder
   */
  public static example.avro.Payment.Builder newBuilder(example.avro.Payment.Builder other) {
    if (other == null) {
      return new example.avro.Payment.Builder();
    } else {
      return new example.avro.Payment.Builder(other);
    }
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Payment instance.
   * @param other The existing instance to copy.
   * @return A new Payment RecordBuilder
   */
  public static example.avro.Payment.Builder newBuilder(example.avro.Payment other) {
    if (other == null) {
      return new example.avro.Payment.Builder();
    } else {
      return new example.avro.Payment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Payment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payment>
    implements org.apache.avro.data.RecordBuilder<Payment> {

    private java.lang.String name;
    private java.lang.String iban;
    private java.lang.String toIban;
    private float amount;
    private float balance;
    private boolean processed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.Payment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.iban)) {
        this.iban = data().deepCopy(fields()[1].schema(), other.iban);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.toIban)) {
        this.toIban = data().deepCopy(fields()[2].schema(), other.toIban);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.balance)) {
        this.balance = data().deepCopy(fields()[4].schema(), other.balance);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.processed)) {
        this.processed = data().deepCopy(fields()[5].schema(), other.processed);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Payment instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.Payment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.iban)) {
        this.iban = data().deepCopy(fields()[1].schema(), other.iban);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.toIban)) {
        this.toIban = data().deepCopy(fields()[2].schema(), other.toIban);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.balance)) {
        this.balance = data().deepCopy(fields()[4].schema(), other.balance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.processed)) {
        this.processed = data().deepCopy(fields()[5].schema(), other.processed);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'iban' field.
      * @return The value.
      */
    public java.lang.String getIban() {
      return iban;
    }


    /**
      * Sets the value of the 'iban' field.
      * @param value The value of 'iban'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setIban(java.lang.String value) {
      validate(fields()[1], value);
      this.iban = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'iban' field has been set.
      * @return True if the 'iban' field has been set, false otherwise.
      */
    public boolean hasIban() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'iban' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearIban() {
      iban = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'toIban' field.
      * @return The value.
      */
    public java.lang.String getToIban() {
      return toIban;
    }


    /**
      * Sets the value of the 'toIban' field.
      * @param value The value of 'toIban'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setToIban(java.lang.String value) {
      validate(fields()[2], value);
      this.toIban = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'toIban' field has been set.
      * @return True if the 'toIban' field has been set, false otherwise.
      */
    public boolean hasToIban() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'toIban' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearToIban() {
      toIban = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public float getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setAmount(float value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'balance' field.
      * @return The value.
      */
    public float getBalance() {
      return balance;
    }


    /**
      * Sets the value of the 'balance' field.
      * @param value The value of 'balance'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setBalance(float value) {
      validate(fields()[4], value);
      this.balance = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'balance' field has been set.
      * @return True if the 'balance' field has been set, false otherwise.
      */
    public boolean hasBalance() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'balance' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearBalance() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'processed' field.
      * @return The value.
      */
    public boolean getProcessed() {
      return processed;
    }


    /**
      * Sets the value of the 'processed' field.
      * @param value The value of 'processed'.
      * @return This builder.
      */
    public example.avro.Payment.Builder setProcessed(boolean value) {
      validate(fields()[5], value);
      this.processed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'processed' field has been set.
      * @return True if the 'processed' field has been set, false otherwise.
      */
    public boolean hasProcessed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'processed' field.
      * @return This builder.
      */
    public example.avro.Payment.Builder clearProcessed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payment build() {
      try {
        Payment record = new Payment();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.iban = fieldSetFlags()[1] ? this.iban : (java.lang.String) defaultValue(fields()[1]);
        record.toIban = fieldSetFlags()[2] ? this.toIban : (java.lang.String) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Float) defaultValue(fields()[3]);
        record.balance = fieldSetFlags()[4] ? this.balance : (java.lang.Float) defaultValue(fields()[4]);
        record.processed = fieldSetFlags()[5] ? this.processed : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payment>
    READER$ = (org.apache.avro.io.DatumReader<Payment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.iban);

    out.writeString(this.toIban);

    out.writeFloat(this.amount);

    out.writeFloat(this.balance);

    out.writeBoolean(this.processed);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      this.iban = in.readString();

      this.toIban = in.readString();

      this.amount = in.readFloat();

      this.balance = in.readFloat();

      this.processed = in.readBoolean();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          this.iban = in.readString();
          break;

        case 2:
          this.toIban = in.readString();
          break;

        case 3:
          this.amount = in.readFloat();
          break;

        case 4:
          this.balance = in.readFloat();
          break;

        case 5:
          this.processed = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










